# SCHISM Default parameters

#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Model configuration parameters
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

# Starting time
start_year : 2000 #int
start_month : 2 #int
start_day : 1 #int
start_hour : 0 #double
utc_start : 0 #double

#-----------------------------------------------------------------------
# Coordinate option: 1: Cartesian; 2: lon/lat (hgrid.gr3=hgrid.ll in this case,
# and orientation of element is outward of earth)
#-----------------------------------------------------------------------
ics : 2 #Coordinate option

#-----------------------------------------------------------------------
# Pre-processing option. Useful for checking grid violations.
#-----------------------------------------------------------------------
ipre : 0 #Pre-processor flag (1: on; 0: off)

#-----------------------------------------------------------------------
# Equation of State type used
# ieos_type=0: UNICEF (nonlinear); =1: linear function of T ONLY, i.e. 
# \rho=eos_b+eos_a*T, where eos_a<=0 in kg/m^3/C
#-----------------------------------------------------------------------
ieos_type : 0
ieos_pres : 0
eos_a : -0.1 #needed if ieos_type=1; should be <=0 
eos_b : 1001. #needed if ieos_type=1

#-----------------------------------------------------------------------
# If WWM is used, set coupling/decoupling flag. Not used if USE_WWM is distabled in Makefile
#       0: decoupled so 2 models will run independently; 
#       1: full coupled (elevation, vel, and wind are all passed to WWM); 
#       2: elevation and currents in wwm, no wave force in selfe;  
#       3: no elevation and no currents in wwm, wave force in selfe;
#       4: elevation but no currents in wwm, wave force in selfe;
#       5: elevation but no currents in wwm, no wave force in selfe;
#       6: no elevation but currents in wwm, wave force in selfe;
#       7: no elevation but currents in wwm, no wave force in selfe;
# Note that all these parameters must be present in this file (even though not used).
#-----------------------------------------------------------------------
icou_elfe_wwm : 0
nstep_wwm : 100 #call WWM every this many time steps. If /=1, consider using quasi-steady mode in WWM
iwbl : 0 #1: modified Grant-Madsen formulation for wave boundary layer; used only if icou_elfe_wwm/=0; if icou_elfe_wwm=0, set iwbl=0
msc2 : 0 #same as MSC in .nml ... for consitency check between SCHISM and WWM-II
mdc2 : 0 #same as MDC in .nml
hmin_radstress : 1. #min. total water depth used only in radiation stress calculation [m]

#-----------------------------------------------------------------------
# Define # of tracers in each module (if enabled)
#-----------------------------------------------------------------------

ntracer_gen : 2 #user defined module
ntracer_age : 4 #age calculation. Must be =2*N where N is # of age tracers
sed_class : 5 #SED3D
eco_class : 25 #EcoSim: must be between [25,60]

#-----------------------------------------------------------------------
# Bed deformation option (0: off; 1: vertical deformation only; 2: 3D bed deformation). 
# If imm=1, bdef.gr3 is needed; if imm=2, user needs to update depth info etc
# in the code (not working for ics=2 yet).
#-----------------------------------------------------------------------
imm : 0
ibdef : 10 #needed if imm=1; # of steps used in deformation

#-----------------------------------------------------------------------
# Reference latitude for beta-plane approximation when ncor=1 (not used if ics=2)
#-----------------------------------------------------------------------
cpp_lon : 174  #lon - not really used
cpp_lat : -42 #lat

#-----------------------------------------------------------------------
# Baroclinic/barotropic option. If ibcc=0 (baroclinic model), itransport is not used.
#-----------------------------------------------------------------------
ibcc : 0 #Baroclinic option
itransport : 1
nrampbc : 0 # [originally 1] #ramp-up flag for baroclinic force
drampbc : 1. #not used if nrampbc=0

#-----------------------------------------------------------------------
# Hannah-Wright-like ratio & depth used to account for under-resolution
# in a b-clinic model. Used only if ibcc=0.
# The b-clinic force at prism centers is calculated with a reconstruction
# method in horizontal that has a stencil of an element and its adjacent elements.
# If the depths change is too much between the elem and its adjacent elem
# the under-resolution occurs (with steep bottom slope) and b-clinic force
# needs to be zeroed out below the (higher) bottom, specifically, if
# max(2 depths)>=hw_depth and abs(diff(2 depths))>=hw_ratio*max(2 depths).
#-----------------------------------------------------------------------
hw_depth : 1.0e6 #threshold depth in [m]
hw_ratio : 0.5 #ratio

#-----------------------------------------------------------------------
# Hotstart option. 0: cold start; 1: hotstart with time reset to 0; 2: 
# continue from the step in hotstart.in
#-----------------------------------------------------------------------
ihot : 0

#-----------------------------------------------------------------------
# Hydraulic model option. If ihydraulics/=0, hydraulics.in 
# is required. This option cannot be used with non-hydrostatic model.
#-----------------------------------------------------------------------
ihydraulics : 0

#-----------------------------------------------------------------------
# Point sources/sinks option (0: no; 1: on). If =1, needs source_sink.in,
# vsource,th, vsink.th, and msource.th
#-----------------------------------------------------------------------
if_source : 0
nramp_ss : 1 #needed if if_source=1; ramp-up flag for source/sinks
dramp_ss : 2 #needed if if_source=1; ramp-up period in days

#-----------------------------------------------------------------------
# Method for momentum advection. 0: ELM; 1: upwind (not quite working yet)
#-----------------------------------------------------------------------
iupwind_mom : 0

#-----------------------------------------------------------------------
# Methods for computing velocity at nodes. 
# If indvel=0, conformal linear shape function is used; if indvel=1, averaging method is used.
# For indvel=0, some stabilization method is needed (see below). 
#-----------------------------------------------------------------------
indvel : 0 
#-----------------------------------------------------------------------
# 2 stabilization methods, mostly for indvel=0.
# (1) Horizontal viscosity option. ihorcon=0: no viscosity is used; =1: Lapacian;
# =2: bi-harmonic. If ihorcon=1, horizontal viscosity _coefficient_ (<=1/8, related
# to diffusion number) is given in hvis_coef0, and the diffusion # 
# is problem dependent; [0.001-1/8] seems to work well.
# If ihorcon=2, diffusion number is given by hvis_coef0 (<=0.025).
# If indvel=1, no hvis is needed. 
# (2) Shapiro filter (see below)
#-----------------------------------------------------------------------
ihorcon : 0
hvis_coef0 : 0.025 #const. diffusion # if ihorcon/=0; <=0.025 for ihorcon=2, <=0.125 for ihorcon=1
cdh : 0.01 #needed only if ihorcon/=0; land friction coefficient - not active yet

#-----------------------------------------------------------------------
# 2nd stabilization method via Shapiro filter. This should normally be used 
# if indvel=ihorcon=0. To transition between eddying/non-eddying regimes, use
# indvel=0, ihorcon/=0, and ishapiro=-1 (shapiro.gr3).
#-----------------------------------------------------------------------
ishapiro : 1 #on/off flag
shapiro : 0.5 #Shapiro filter strength, needed only if ishapiro=1; max is 0.5 

#-----------------------------------------------------------------------
# Horizontal diffusivity option. if ihdif=1, horizontal diffusivity is given in hdif.gr3
#-----------------------------------------------------------------------
ihdif : 0

#-----------------------------------------------------------------------
# Bottom friction. 
#           bfric=0: drag coefficients specified in drag.gr3; bfric=-1: Manning's 
#           formulation (even for 3D prisms). 
#           bfric=1: bottom roughness (in meters) specified in rough.gr3 (and in this case, negative
#           or 0 depths in rough.gr3 indicate time-independent Cd, not roughness#).
#           Cd is calculated using the log law, when dzb>=dzb_min; when dzb<dzb_min,
#           Cd=Cdmax*exp[dzb_decay*(1-dzb/dzb_min)], where Cdmax=Cd(dzb=dzb_min),
#           and dzb_decay (<=0) is a decay const specified below.
#           If iwbl=1, bfric must =1.
#-----------------------------------------------------------------------
bfric : 0 #nchi in code
dzb_min : 0.5 #needed if bfric==1; min. bottom boundary layer thickness [m].
dzb_decay : 0 #needed if bfric=1; a decay const. [-]
hmin_man : 1. #needed if bfric=-1: min. depth in Manning's formulation [m]

#-----------------------------------------------------------------------
# Coriolis. If ncor=-1, specify "latitude" (in degrees); if ncor=0,
# specify Coriolis parameter in "coriolis"; if ncor=1, model uses
# lat/lon in hgrid.ll for beta-plane approximation if ics=1, and in this case,
# the latitude specified in CPP projection ('cpp_lat') is used. If ncor=1 and ics=2,
# Coriolis is calculated from local latitude, and 'cpp_lat' is not used.
#-----------------------------------------------------------------------
ncor : 1 #must be 1 if ics=2
latitude : 46 #if ncor=-1
coriolis : 1.e-4 #if ncor=0

#-----------------------------------------------------------------------
# Elevation initial condition flag. If ic_elev=1, elev.ic (in *.gr3 format) is needed
# to specify the initial elevations; otherwise elevation is initialized to 0 everywhere 
# (cold start only)
#-----------------------------------------------------------------------
ic_elev : 0

#-----------------------------------------------------------------------
# Elevation boundary condition ramp-up flag. =0: ramp up from 0; =1: ramp up from
# elev. values read in from elev.ic or hotstart.in - if neither is present, from 0.
# This flag is mainly used to start the simulation from non-zero elev.
# The ramp-up period is same as 'dramp' below.
#-----------------------------------------------------------------------
nramp_elev : 0

#-----------------------------------------------------------------------
# Optional inverse barometric effects on the elev. b.c.
# If inv_atm_bnd=1, the elev.'s at boundary are corrected by the difference
# between the actual atmos. pressure and a reference pressure (prmsl_ref below)
#-----------------------------------------------------------------------
inv_atm_bnd : 0 #0: off; 1: on
prmsl_ref : 101325. #reference atmos. pressure on bnd [Pa]

#-----------------------------------------------------------------------
# Initial condition for T,S. This value only matters for ihot=0 (cold start).
# If ic_*=1, the initial T,S field is read in from temp.ic and salt.ic (horizontally varying).
# If ic_*=2, the initial T,S field is read in from ts.ic (vertical varying).
# If ihot=0 && ic_*=2 || ibcc_mean=1, ts.ic is used for removing mean density profile.
#-----------------------------------------------------------------------
ic_TEM : 1
ic_SAL : 1 #must be same as ic_TEM

# initial conditions for other tracers.
# 1: needs inputs [MOD]_hvar_[1,2,...].ic ('1...' is tracer id); format of each file is similar to salt.ic;
#    i.e. horizontally varying i.c. is used for each tracer.
# 2: needs [MOD]_vvar_[1,2,...].ic. Format of each file (for each tracer in tis MOD) is similar to ts.ic
#    (i.e. level #, z-coord., tracer value). Verically varying i.c. is used for each tracer.
# 0: model sets own i.c. (EcoSim; TIMOR)
ic_GEN : 0 #user defined module
ic_AGE : 0 #Age
ic_SED : 0 #SED3D
ic_ECO : 0 #EcoSim
ic_ICM : 0 #ICM
ic_COS : 0 #CoSINE
ic_FIB : 0 #FIB

#-----------------------------------------------------------------------
# Settling vel [m/s] for GEN module (positive downward)
#-----------------------------------------------------------------------
gen_wsett : 1.e-4

#-----------------------------------------------------------------------
# Mean T,S profile option. If ibcc_mean=1 (or ihot=0 and ic_TEM=2), mean profile
# is read in from ts.ic, and will be removed when calculating baroclinic force.
# No ts.ic is needed if ibcc_mean=0.
#-----------------------------------------------------------------------
ibcc_mean : 0

#-----------------------------------------------------------------------
# Max. horizontal velocity magnitude, used mainly to prevent problem in 
# bulk aerodynamic module
#-----------------------------------------------------------------------
rmaxvel : 20.

#-----------------------------------------------------------------------
#  Following 2 parameters control backtracking
#-----------------------------------------------------------------------
#-----------------------------------------------------------------------
#  min. vel for invoking btrack and for abnormal exit in quicksearch
#-----------------------------------------------------------------------
velmin_btrack : 1.e-4
#-----------------------------------------------------------------------
# Nudging factors for starting side/node - add noise to avoid underflow
# The starting location is nudged to: old*(1-btrack_nudge)+btrack_nudge*centroid
# Suggested value: btrack_nudge=9.013e-3
#-----------------------------------------------------------------------
btrack_nudge : 9.013e-3 

#-----------------------------------------------------------------------
# Wetting and drying. If ihhat=1, \hat{H} is made non-negative to enhance
# robustness near wetting and drying; if ihhat=0, no retriction is imposed for
# this quantity. 
# inunfl=0 is used for normal cases and inunfl=1 is used for more accurate wetting
# and drying if grid resolution is sufficiently fine.
#-----------------------------------------------------------------------
ihhat : 1 
inunfl : 0
h0 : 0.01 #min. water depth for wetting/drying

#-----------------------------------------------------------------------
# Implicitness factor (0.5<thetai<=1).
#-----------------------------------------------------------------------
thetai : 0.6 

#-----------------------------------------------------------------------
# Run time and ramp option
#-----------------------------------------------------------------------

rnday : 30 #total run time in days
nramp : 0 #ramp-up option (1: on; 0: off)
dramp : 0 #needed if nramp=1; ramp-up period in days
dt : 100 #Time step in sec

#-----------------------------------------------------------------------
# Solver option. JCG is used presently.
#-----------------------------------------------------------------------
slvr_output_spool : 50 #output spool for solver info
mxitn : 1500 #max. iteration allowed
tolerance : 1.e-12 #error tolerance

#-----------------------------------------------------------------------
# Advection (ELM) option. If nadv=1, backtracking is done using Euler method; 
# nadv=2, using 2nd order Runge-Kutta; if nadv=0, advection in momentum 
# is turned off/on in adv.gr3 (the depths=0,1, or 2 also control methods 
# in backtracking as above). dtb_max/min are the max/min steps allowed -
# actual step is calculated adaptively based on local gradient.
#-----------------------------------------------------------------------
nadv : 2
dtb_max : 30. #in sec
dtb_min : 10.

#-----------------------------------------------------------------------
# If inter_mom=0, linear interpolation is used for velocity at foot of char. line.
# If inter_mom=1 or -1, Kriging is used, and the choice of covariance function is
# specified in 'kr_co'. If inter_mom=1, Kriging is applied to whole domain;
# if inter_mom=-1, the regions where Kriging is used is specified in krvel.gr3 
# (depth=0: no kriging; depth=1: with kriging). 
#-----------------------------------------------------------------------
inter_mom : 1 
kr_co : 1 #not used if inter_mom=0

#-----------------------------------------------------------------------
# Transport method.
# If itr_met=1, upwind method is used. If itr_met>=2, TVD or WENO method is used
# on an element/prism if the total depth (at all nodes of the elem.)>=h_tvd and the flag in
# tvd.prop : 1 for the elem. (tvd.prop is required in this case);
# otherwise upwind is used for efficiency.
# itr_met=3 (horizontal TVD) or 4 (horizontal WENO): implicit TVD in the vertical dimension.
# Also if itr_met==3 and h_tvd>=1.e5, some parts of the code are bypassed for efficiency
# Controls for WENO are not yet in place
#-----------------------------------------------------------------------

itr_met : 3
h_tvd : 5. #used only if itr_met=2 or 3; cut-off depth (m) 
#If itr_met=3, need the following 2 tolerances of convergence. The convergence
#is achieved when sqrt[\sum_i(T_i^s+1-T_i^s)^2]<=eps1_tvd_imp*sqrt[\sum_i(T_i^s)^2]+eps2_tvd_imp
eps1_tvd_imp : 1.e-4 #suggested value is 1.e-4, but for large suspended load, need to use a smaller value (e.g. 1.e-9)
eps2_tvd_imp : 1.e-14   
#if itr_met : 4, the following parameters are needed
#if itr_met=4 and ipre=1, diagnostic outputs are generated for weno accuracy and stencil quality,
#  see subroutine weno_diag in src/Hydro/misc_subs.F90 for details
ip_weno : 2   #order of accuracy: 0- upwind; 1- linear polynomial, 2nd order; 2- quadratic polynomial, 3rd order
courant_weno : 0.5 #Courant number for weno transport
epsilon1 : 1.e-3   #coefficient for 2nd order weno smoother
epsilon2 : 1.e-10  #1st coefficient for 3rd order weno smoother
epsilon3 : 1.e-25  #2nd coefficient for 3rd order weno smoother
#Elad filter has not been implemented yet; preliminary tests showed it might not be necessary
ielad_weno : 0      #ielad, if ielad=1, use ELAD method to suppress dispersion
small_elad : 1.e-4  #small

#-----------------------------------------------------------------------
# Atmos. option. If nws=0, no atmos. forcing is applied. If nws=1, atmos.
# variables are read in from wind.th. If nws=2, atmos. variables are
# read in from sflux_ files.
# If nws=4, ascii format is used for wind and atmos. pressure at each node (see source code).
# If nws>0, 'iwindoff' can be used to scale wind speed (with windfactor.gr3).
#
# Stress calculation:
# If nws=1 or >=4, or nws=2 and ihconsv=0, or nws=2 and iwind_form=-1,
# the stress is calculated from Pond & Pichard formulation
# If nws=2, ihconsv=1 and iwind_form=0, the stress is calculated from heat exchange
# routine;
# If WWM is enabled and icou_elfe_wwm>0 and iwind_form=-2, stress is calculated by WWM;
# otherwise the formulations above are used.
#-----------------------------------------------------------------------

nws : 2
wtiminc : 3600 #time step for atmos. forcing
nrampwind : 0 #ramp-up option for atmos. forcing
drampwind : 0 #needed if nrampwind/=0; ramp-up period in days
iwindoff : 0 #needed only if nws/=0; '1': needs windfactor.gr3
iwind_form : -1

#-----------------------------------------------------------------------
# Heat and salt exchange. isconsv=1 needs ihconsv=1; ihconsv=1 needs nws=2.
# If isconsv=1, need to compile with precip/evap module turned on.
#-----------------------------------------------------------------------
ihconsv : 0 #heat exchange option
isconsv : 0 #evaporation/precipitation model

#-----------------------------------------------------------------------
# Turbulence closure.
#-----------------------------------------------------------------------
itur : 3
dfv0 : 1.e-6 #needed if itur=0
dfh0 : 1.e-6 #needed if itur=0
turb_met : KE #needed if itur=3
turb_stab : KC #needed if itur=3. Use 'GA' if turb_met='MY'; otherwise use 'KC'
xlsc0 : 0.7 #needed if itur=3. Scale for surface & bottom mixing length (>0)

#-----------------------------------------------------------------------
# Sponge layer for elevation and vel.
# If inu_elev=0, no relaxation is applied to elev.
# If inu_elev=1, relax. constants are specified in elev_nudge.gr3
# and applied to eta=0 (thus a depth=0 means no relaxation).
# Similarly for inu_uv (with input uv_nudge.gr3)
#-----------------------------------------------------------------------
inu_elev : 0
inu_uv : 0

#-----------------------------------------------------------------------
# Nudging options for tracers. If inu_[MOD]=0, no nudging is used. If inu_[MOD]=1,
# nudge to initial condition according to relaxation constants specified
# in [MOD]_nudge.gr3. If inu_[MOD]=2, nudge to values in [MOD]_nu,in
# (with step 'step_nu_tr') according to [MOD]_nudge.gr3. 
# The final relaxation : horizontal relax (specified in [MOD]_nudge.gr3) times dt.
# [MOD] are tracer model names.
#-----------------------------------------------------------------------
inu_TEM : 0
inu_SAL : 0
inu_GEN : 0 #user defined
inu_AGE : 0 #Age
inu_SED : 0 #SED3D
inu_ECO : 0 #EcoSim
inu_ICM : 0 #ICM
inu_COS : 0 #CoSINE
inu_FIB : 0 #FIB

step_nu_tr : 86400. #time step [sec] in all [MOD]_nu.in (for inu_[MOD]=2)

#-----------------------------------------------------------------------
# Cut-off depth for cubic spline interpolation near bottom when computing horizontal gradients
# e.g. using hgrad_nodes() (baroc. force, radiation stress, and gradients of qnon and qhat in non-hydro model). 
# If depth > depth_zsigma ('deep'),
# a min. (e.g. max bottom z-cor for the element) is imposed in the spline and so a more
# conservative method is used without extrapolation beyond bottom; 
# otherwise constant extrapolation below bottom is used.
#-----------------------------------------------------------------------
depth_zsigma : 1000. #h_bcc1

#-----------------------------------------------------------------------
# Dimensioning parameters for inter-subdomain btrack. 
# If error occurs like 'bktrk_subs: overflow' or 'MAIN: nbtrk > mxnbt'
# gradually increasing these will solve the problem
#-----------------------------------------------------------------------
s1_mxnbt : 0.5
s2_mxnbt : 3.0

#-----------------------------------------------------------------------
# Global output options.
#-----------------------------------------------------------------------
nspool : 3600 #output step spool
ihfskip : 86400 #stack spool; every ihfskip steps will be put into 1_*, 2_*, etc...

#-----------------------------------------------------------------------
# Station output option. If iout_sta/=0, need output skip (nspool_sta) and
# a station.in. If ics=2, the cordinates in station.in must be in lon., lat,
# and z (positive upward; not used for 2D variables). 
#-----------------------------------------------------------------------
iout_sta : 0
nspool_sta : 1 #needed if iout_sta/=0

#-----------------------------------------------------------------------
# Flag for harmonic analysis for elevation. If used , need to turn on cpp flags
# in Makefile first. Otherwise set it to 0.
#-----------------------------------------------------------------------
iharind : 0

#-----------------------------------------------------------------------
# Conservation check option. If consv_check=1, some fluxes are computed
# in regions specified in fluxflag.prop (regional number from -1 to an arbitrary integer).
#-----------------------------------------------------------------------
consv_check : 0

#-----------------------------------------------------------------------
# Option for hotstart outputs
#-----------------------------------------------------------------------
hotout : 1 #1: output *_hotstart every 'hotout_write' steps
hotout_write : 86400

#-----------------------------------------------------------------------
# Test flags for debugging. These flags should be turned off normally.
#-----------------------------------------------------------------------
# Williamson test #5 (zonal flow over an isolated mount); if
# on, ics must =2
#-----------------------------------------------------------------------
izonal5 : 0 #"0" - no test; otherwise on

#-----------------------------------------------------------------------
# Rotating Gausshill test with stratified T,S (1: on; 0: off)
# Surface T,S read in from *.ic; code generates stratification
#-----------------------------------------------------------------------
ibtrack_test : 0

#-----------------------------------------------------------------------
# Rouse profile test (1: on; 0: off)
# If on, must turn on USE_TIMOR
#-----------------------------------------------------------------------
irouse_test : 0

#-----------------------------------------------------------------------
# Flag to choose FIB model for bacteria decay (used with USE_FIB)
# flag_fib : 1 - Constant decay rate (/day) in .gr3 format
#                (kkfib_1.gr3 and kkfib_2.gr3)
# flag_fib : 2 - Decay rate computed from Canteras et al., 1995
# flag_fib : 3 - Decay rate computed from Servais et al., 2007
#----------------------------------------------------------------------
flag_fib : 1

#----------------------------------------------------------------------
# Marsh model parameters (only if USE_MARSH is on)
#----------------------------------------------------------------------
slr_rate : 120. #sea-level rise rate in mm/yr, times morphological acceleration if used

#----------------------------------------------------------------------
# Submerged aquatic vegetation model
# If isav=1, need 3 extra inputs: (1) sav_D.gr3 (depth is stem diameter in meters);
# (2) sav_N.gr3 (depth is # of stems per m^2);
# (3) sav_h.gr3 (height of canopy in meters).
# If one of these depths=0 at a node, the code will set all to 0.
#----------------------------------------------------------------------
isav : 0 #on/off flag
sav_cd : 1.13 #only needed if isav=1. Drag coefficient

#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# Physical constants
#+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#-----------------------------------------------------------------------
# Earth's radii at pole and equator (to define an ellipsoid)
#-----------------------------------------------------------------------
rearth_pole : 6378206.4
rearth_eq : 6378206.4

#-----------------------------------------------------------------------
# Specific heat of water (C_p) in J/kg/K
#-----------------------------------------------------------------------
shw : 4184.d0

#-----------------------------------------------------------------------
# Reference water density for Boussinesq approximation
#-----------------------------------------------------------------------
rho0 : 1000.d0 #kg/m^3

